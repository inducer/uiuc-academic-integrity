grist_root_url: "https://scicomp-grist.cs.illinois.edu"
grist_doc_id: s7VzXiAHXbwgivucYprb6z

# All text is interpreted as a Jinja template, with row data available.
# https://jinja.palletsprojects.com/en/3.0.x/templates/

parameters:
- request_group

query: |
    select *
    from Availability_requests
    inner join Persons on Person = Persons.id
    where Responded is null
    and (
        (Response_deadline is not null and Response_deadline < unixepoch('now'))
        or Last_nag is null)
    and Request_group == {{ request_group }}

to:
-
    name: "{{ Full_name }}"
    email: "{{ Email }}"
cc:
- 
    name: Andreas Kloeckner
    email: andreask@illinois.edu

subject: |
    {% if Nag_count > 1%}
        [TODO: REMINDER #{{ Nag_count}}]
    {% elif Nag_count == 1%}
        [TODO: REMINDER]
    {% else %}
        [TODO]
    {% endif %}
    Availability for Appeal Hearings: {{ Request_group_description }}

body: |

    Dear {{ First_name }},

    {% if "Committee" in Person_Category -%}
    Thank you for serving on the Academic Appeals Committee this schoolyear.
    A number of appeals cases need to be heard in the near future. 
    {%- elif Available -%}
    Thank you for indicating your willingness to serve in an academic integrity hearing.
    {%- else -%}
    One or more appeals cases in CS involving you need to be heard in the near future.
    {%- endif %}
    To allow these hearings to proceed, please click the following link in
    order to provide your availability:

    {{ Availability_URL }}

    {% if Nag_count %}
    To avoid making my job harder than it already is:
    {% endif %}
    Please provide your response by {{ updated_Response_deadline | format_timestamp("%B %d %I:%M %p") }}
    at the latest.

    {% if not Nag_count %}
    Thank you!
    {% endif %}
    Andreas
    Chair, CS Academic Appeals Committee

    {% if Nag_count %}
    PS: Make these emails stop! Respond now. :)
    {% endif %}

update:
    table: Availability_requests
    fields:
        Nag_count: |
            Nag_count + 1 if Nag_count is not None else 1
        Last_nag: |
            from time import time
            time()
        Response_deadline: |

            import date_utils as du
            import datetime

            deadline = datetime.datetime.fromtimestamp(Response_deadline)

            min_deadline = du.datetime_by_adding_business_days(
                datetime.datetime.combine(
                    datetime.date.today(),
                    deadline.time()),
                1)

            if deadline < min_deadline:
                deadline = min_deadline

            deadline.timestamp()
